Control AppleTV with:
https://github.com/postlund/pyatv

Get an HLS server for AppleTV/Chromecast with:
https://github.com/gwuhaolin/livego



	_ = []chromedp.ExecAllocatorOption{
		chromedp.NoFirstRun,
		chromedp.NoDefaultBrowserCheck,
		chromedp.DisableGPU,

		chromedp.NoSandbox,
		// chromedp.Headless,

		// After Puppeteer's default behavior.
		chromedp.Flag("disable-infobars", true),
		chromedp.Flag("excludeSwitches", "enable-automation"),
		chromedp.Flag("disable-background-networking", true),
		chromedp.Flag("enable-features", "NetworkService,NetworkServiceInProcess"),
		chromedp.Flag("disable-background-timer-throttling", true),
		chromedp.Flag("disable-backgrounding-occluded-windows", true),
		chromedp.Flag("disable-breakpad", true),
		chromedp.Flag("disable-client-side-phishing-detection", true),
		chromedp.Flag("disable-default-apps", true),
		chromedp.Flag("disable-dev-shm-usage", true),
		chromedp.Flag("disable-extensions", true),
		chromedp.Flag("disable-features", "site-per-process,TranslateUI,BlinkGenPropertyTrees"),
		chromedp.Flag("disable-hang-monitor", true),
		chromedp.Flag("disable-ipc-flooding-protection", true),
		chromedp.Flag("disable-popup-blocking", true),
		chromedp.Flag("disable-prompt-on-repost", true),
		chromedp.Flag("disable-renderer-backgrounding", true),
		chromedp.Flag("disable-sync", true),
		chromedp.Flag("force-color-profile", "srgb"),
		chromedp.Flag("metrics-recording-only", true),
		chromedp.Flag("safebrowsing-disable-auto-update", true),
		chromedp.Flag("enable-automation", true),
		chromedp.Flag("password-store", "basic"),
		chromedp.Flag("use-mock-keychain", true),
	}

	// //allocatorCtx, _ := chromedp.NewExecAllocator(context.Background(), opts...)
	// allocatorCtx, cancel := chromedp.NewRemoteAllocator(context.Background(), "ws://localhost:9222/")
	// defer cancel()

	// ctx, cancel := chromedp.NewContext(allocatorCtx)
	// defer cancel()

	// // create a timeout
	// // ctx, cancel = context.WithTimeout(ctx, 15*time.Second)
	// // defer cancel()

	// startPage := os.Args[1]

	// // navigate to a page, wait for an element, click
	// var example string
	// err = chromedp.Run(ctx,
	// 	chromedp.Navigate(startPage),
	// 	// wait for footer element is visible (ie, page is loaded)
	// 	chromedp.WaitVisible(`body > footer`),
	// 	// find and click "Example" link
	// 	chromedp.Click(`#example-After`, chromedp.NodeVisible),
	// 	// retrieve the text of the textarea
	// 	chromedp.Value(`#example-After textarea`, &example),
	// )
	// if err != nil {
	// 	log.Fatal(err)
	// }